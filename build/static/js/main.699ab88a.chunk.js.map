{"version":3,"sources":["components/ListItem.js","components/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","state","selectedOption","handleChange","_this","setState","string","value","username","Cookies","get","firebase","ref","update","Object","defineProperty","props","priority","deleteSkill","e","preventDefault","onDelete","this","skill","type","react_default","a","createElement","react_select_esm","className","onChange","options","skillList","placeholder","onClick","isDisabled","Component","ListContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","skillTagList","skillTagListLoaded","skillPriorityListLoaded","skillPriorityList","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","_this2","axios","then","response","data","items","catch","error","_this3","on","snapshot","val","deletedSkillIndex","updatedSkillPriorityList","numberOfSkills","temp","x","push","set","makeId","getSkillPriorityList","getSkillTagList","text","possible","i","charAt","Math","floor","random","some","item","name","toUpperCase","slice","isSkillPresent","label","columnOne","columnTwo","skillLength","components_ListItem","updateSkillPriorityList","bind","App","components_ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.699ab88a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import Draggable from 'react-draggable';\nimport Select from 'react-select';\nimport './components.css';\nimport Cookies from 'js-cookie';\nimport * as firebase from \"firebase\";\n\n// converting it in a class\n// if a skill is selected it will be updated in firebase\n// and Draggable li will be rendered\n\n\n// tasks\n// send all inline css below to ./components.css\nclass ListItem extends Component{\n\n  state = {\n    selectedOption: null,\n  }\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    \n    var string = selectedOption.value;\n\n    const username = Cookies.get('username');\n    firebase.database().ref('/items/'+username).update({\n          [this.props.priority]: string\n    });\n  }\n\n  deleteSkill = (e) => {\n    e.preventDefault();\n    this.setState({ selectedOption: null });\n    this.props.onDelete(this.props.priority);\n  }\n\n  render() {\n\n    const { selectedOption } = this.state;\n    var skill = \"\";\n\n    if(this.props.type === \"activeInput\" && selectedOption === null) {\n      \n      return (\n        <li> \n          <Select className='dropdownStyle' value={selectedOption} onChange={this.handleChange} options={this.props.skillList} placeholder={this.props.placeholder}/>\n        </li>\n      );\n    }\n    else if( this.props.type === \"filledInput\"){\n\n      if(selectedOption !== null)\n        skill = selectedOption.value;\n      else\n        skill = this.props.skill;\n\n      return (\n            <li className='containerStyleExist'>\n              <div className='textContainer'>\n                <span className='textStyle'>{this.props.priority}.</span>\n                <span className='textStyle'>{skill}</span>\n              </div>\n              <button className='crossIconStyle' onClick={this.deleteSkill}>x</button>\n            </li>\n      );\n    }\n    else {\n      return (\n        <li> \n          <Select isDisabled className='dropdownStyle' value={selectedOption} options={this.props.skillList} placeholder={this.props.placeholder}/>\n        </li>\n      );\n    }\n    \n  }\n\n} \n\nexport default ListItem;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ListItem from './ListItem';\nimport Cookies from 'js-cookie';\nimport './components.css';\nimport * as firebase from \"firebase\";\n\nclass ListContainer extends Component {\n\n    state = {\n        skillTagList : {},\n        skillTagListLoaded: false,\n        skillPriorityListLoaded: false,\n        skillPriorityList: {}\n    };\n\n    constructor(){\n        // Initialize the 'this'\n        super();\n\n        // configure firebase\n        const config = {\n            apiKey: \"AIzaSyBOAOEmFnIT5XdKgWXlvOFz5U-IUjhQeWA\",\n            authDomain: \"multi-column-sortable-tag-list.firebaseapp.com\",\n            databaseURL: \"https://multi-column-sortable-tag-list.firebaseio.com\",\n            projectId: \"multi-column-sortable-tag-list\",\n            storageBucket: \"multi-column-sortable-tag-list.appspot.com\",\n            messagingSenderId: \"512587231011\"\n          };\n        if (!firebase.apps.length) {\n            firebase.initializeApp(config);\n        }\n\n    }\n\n    // get the list of the tags available on stackoverflow\n    getSkillTagList() {\n        axios.get(\"https://api.stackexchange.com/2.2/tags?order=desc&sort=popular&site=stackoverflow&filter=!-.G.68gzI8DP\").then(response => {\n            this.setState({\n            skillTagList: response.data.items,\n            skillTagListLoaded: true\n            });\n        }).catch(error => this.setState({ error, skillTagListLoaded: false }));\n    }\n\n    // get the priority list of existing user\n    getSkillPriorityList() {\n        const username = Cookies.get('username');\n        //synchrounous call to firebase then render the page\n        firebase.database().ref('/items').on(\"value\", (snapshot) => {\n            this.setState(\n                {\n                    skillPriorityList: [snapshot.val()[username]][0],\n                    skillPriorityListLoaded: true\n                }\n            );\n            //console.log(this.state.skillPriorityList)\n         }, (error) => {\n            this.setState({ error, skillTagListLoaded: false })\n         });\n    }\n\n    updateSkillPriorityList(deletedSkillIndex) {\n        // rearrange the priority list\n        // set the state of priority list\n        var updatedSkillPriorityList = {};\n\n        // console.log(deletedPriorityValue);\n        // console.log(this.state.skillPriorityList);\n        var numberOfSkills = this.state.skillPriorityList.length;\n        var temp = [\"undefined\"];\n        for(var x=1; x < (numberOfSkills-1); x++){\n            if(x >= deletedSkillIndex){\n                updatedSkillPriorityList[x] = this.state.skillPriorityList[x+1];\n                temp.push(this.state.skillPriorityList[x+1])\n            }\n            else{\n                updatedSkillPriorityList[x] = this.state.skillPriorityList[x];\n                temp.push(this.state.skillPriorityList[x])\n            }\n        }\n        \n        this.setState({\n            skillPriorityList: [temp]\n        });\n        \n\n        // update the firebase\n        const username = Cookies.get('username');\n        firebase.database().ref('/items').update({\n            [username]: updatedSkillPriorityList\n        });\n    }\n\n    componentWillMount(){\n        if(typeof Cookies.get('username') === 'undefined')    \n            Cookies.set('username', this.makeId());\n\n        this.getSkillPriorityList();\n        this.getSkillTagList();\n    }\n\n    // generate random id\n    makeId() {\n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      \n        for (var i = 0; i < 5; i++)\n          text += possible.charAt(Math.floor(Math.random() * possible.length));\n      \n        return text;\n    }\n\n    isSkillPresent(skill) {\n        if(typeof this.state.skillPriorityList !== 'undefined')\n            return this.state.skillPriorityList.some(item => skill === item);\n        else\n            return false;\n    }\n\n\n    render() {\n        var skillList = [];\n\n        if(this.state.skillTagListLoaded === true && this.state.skillPriorityListLoaded === true){\n            // for loop to iterate over the tag list to ListItem if the value and priority is empty\n\n            //console.log(this.state.skillPriorityList[1]);\n            for(var x in this.state.skillTagList){\n                var skill = this.state.skillTagList[x].name;\n                skill = skill.charAt(0).toUpperCase()+ skill.slice(1);\n\n                if(!this.isSkillPresent(skill))\n                    skillList.push({\n                            value: skill,\n                            label: skill\n                        });\n            }\n                \n            // console.log(skillList);\n            // for now assume that there are only two columns and 8 skills to fill.\n            // for loop to create the dynamic list using the skillPriorityList if there is no skill \n            // left then fill the rest of the rows with blank values.\n            var columnOne = [];\n            var columnTwo = [];\n            var skillLength = 0;\n\n            if(typeof this.state.skillPriorityList !== 'undefined')\n                skillLength = this.state.skillPriorityList.length-1; // due to extra value from firebase\n\n            //console.log(this.state.skillPriorityList);\n\n            for(x = 1; x<=10; x++){\n                if(x < 6){\n                    if(x <= skillLength)\n                        columnOne.push(<ListItem type=\"filledInput\" skill={this.state.skillPriorityList[x]} priority={x} onDelete={this.updateSkillPriorityList.bind(this)}/>);\n                    else if(x <= skillLength+1)\n                        columnOne.push(<ListItem type=\"activeInput\" priority={x} skillList={skillList} placeholder={x+\". Add Item\"}/>);\n                    else\n                        columnOne.push(<ListItem type=\"inactiveInput\" priority={x} placeholder={x+\". Add Item\"}/>);\n                }\n                else{\n                    if(x <= skillLength)\n                        columnTwo.push(<ListItem type=\"filledInput\" skill={this.state.skillPriorityList[x]} priority={x} onDelete={this.updateSkillPriorityList.bind(this)}/>);\n                    else if(x <= skillLength+1)\n                        columnTwo.push(<ListItem type=\"activeInput\" priority={x} skillList={skillList} placeholder={x+\". Add Item\"}/>);\n                    else\n                        columnTwo.push(<ListItem type=\"inactiveInput\" priority={x} placeholder={x+\". Add Item\"}/>);\n                }\n            }\n\n            //console.log(columnOne);\n\n            return(\n                <div>\n                    <ul type=\"none\" className=\"listColumn\">\n                        {columnOne}\n                    </ul>\n                    <ul type=\"none\" className=\"listColumn\">\n                        {columnTwo}\n                    </ul>\n                </div>\n            );\n        }\n        else\n            return(<div></div>)\n    }\n}\n\nexport default ListContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport ListContainer from './components/ListContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <ul type=\"disc\">\n          <li>Things you're good at!</li>\n        </ul>\n        <form>\n          <p>The skills you mention here will help hackathon organizers in assessing you as a potential participant.</p>\n          <ListContainer />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}